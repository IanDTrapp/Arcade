public class TicTacToe {
    
    public int compPickSpace(int[] takenSpaces) {
	public class CutThroatComputerPlayer {
    
	    //Default constructor
	    public CutThroatComputerPlayer(){
	    }

	    //Picks space
	    public int pickSpace(String whichPlayer, int[] takenSpaces){
		
		//Takes in player's number and opponent's number
		int playerNumber = 0;
		int opponentNumber = 0;
		if(whichPlayer.equals("Player 1")){
		    playerNumber = 1;
		    opponentNumber = 2;
		}
		if(whichPlayer.equals("Player 2")){
		    playerNumber = 2;
		    opponentNumber = 1;
		}
		
		//Find a win in space 2
		if(((takenSpaces[0]==playerNumber)&&(takenSpaces[1]==playerNumber))||((takenSpaces[5]==playerNumber)&&(takenSpaces[8]==playerNumber))
		   ||((takenSpaces[4]==playerNumber)&&(takenSpaces[6]==playerNumber))){
		    if(takenSpaces[2]==0){
			return 2;
		    }
		}
		//Find a win in space 1
		if(((takenSpaces[0]==playerNumber)&&(takenSpaces[2]==playerNumber))||((takenSpaces[4]==playerNumber)&&(takenSpaces[7]==playerNumber))){
		    if(takenSpaces[1]==0){
			return 1;
		    }
		}
		//Find a win in space 0
		if(((takenSpaces[1]==playerNumber)&&(takenSpaces[2]==playerNumber))||((takenSpaces[3]==playerNumber)&&(takenSpaces[6]==playerNumber))
		   ||((takenSpaces[4]==playerNumber)&&(takenSpaces[8]==playerNumber))){
		    if(takenSpaces[0]==0){
			return 0;
		    }
		}
		//Find a win in space 5
		if(((takenSpaces[2]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[3]==playerNumber)&&(takenSpaces[4]==playerNumber))){
		    if(takenSpaces[5]==0){
			return 5;
		    }
		} 
		//Find a win in space 4
		if(((takenSpaces[3]==playerNumber)&&(takenSpaces[5]==playerNumber))||((takenSpaces[1]==playerNumber)&&(takenSpaces[7]==playerNumber))
		   ||((takenSpaces[0]==playerNumber)&&(takenSpaces[8]==playerNumber))){
		    if(takenSpaces[4]==0){
			return 4;
		    }
		}
		//Find a win in space 3
		if(((takenSpaces[0]==playerNumber)&&(takenSpaces[6]==playerNumber))||((takenSpaces[4]==playerNumber)&&(takenSpaces[5]==playerNumber))){
		    if(takenSpaces[3]==0){
			return 3;
		    }
		}
		//Find a win in space 8
		if(((takenSpaces[2]==playerNumber)&&(takenSpaces[5]==playerNumber))||((takenSpaces[6]==playerNumber)&&(takenSpaces[7]==playerNumber))
		   ||((takenSpaces[0]==playerNumber)&&(takenSpaces[4]==playerNumber))){
		    if(takenSpaces[8]==0){
			return 8;
		    }
		}
		//Find a win in space 7
		if(((takenSpaces[6]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[1]==playerNumber)&&(takenSpaces[4]==playerNumber))){
		    if(takenSpaces[7]==0){
			return 7;
		    }
		}
		//Find a win in space 6
		if(((takenSpaces[7]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[0]==playerNumber)&&(takenSpaces[3]==playerNumber))
		   ||((takenSpaces[4]==playerNumber)&&(takenSpaces[2]==playerNumber))){
		    if(takenSpaces[6]==0){
			return 6;
		    }
		}

		//Block a win in space 2
		if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[1]==opponentNumber))||((takenSpaces[5]==opponentNumber)&&(takenSpaces[8]==opponentNumber))
		   ||((takenSpaces[4]==opponentNumber)&&(takenSpaces[6]==opponentNumber))){
		    if(takenSpaces[2]==0){
			return 2;
		    }
		}
		//Block a win in space 1
		if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[7]==opponentNumber))){
		    if(takenSpaces[1]==0){
			return 1;
		    }
		}
		//Block a win in space 0
		if(((takenSpaces[1]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpaces[3]==opponentNumber)&&(takenSpaces[6]==opponentNumber))
		   ||((takenSpaces[4]==opponentNumber)&&(takenSpaces[8]==opponentNumber))){
		    if(takenSpaces[0]==0){
			return 0;
		    }
		}
		//Block a win in space 5
		if(((takenSpaces[2]==opponentNumber)&&(takenSpaces[8]==opponentNumber))||((takenSpaces[3]==opponentNumber)&&(takenSpaces[4]==opponentNumber))){
		    if(takenSpaces[5]==0){
			return 5;
		    }
		}
		//Block a win in space 4
		if(((takenSpaces[3]==opponentNumber)&&(takenSpaces[5]==opponentNumber))||((takenSpaces[1]==opponentNumber)&&(takenSpaces[7]==opponentNumber))
		   ||((takenSpaces[0]==opponentNumber)&&(takenSpaces[8]==opponentNumber))){
		    if(takenSpaces[4]==0){
			return 4;
		    }
		}
		//Block a win in space 3
		if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[6]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[5]==opponentNumber))){
		    if(takenSpaces[3]==0){
			return 3;
		    }
		}
		//Block a win in space 8
		if(((takenSpaces[2]==opponentNumber)&&(takenSpaces[5]==opponentNumber))||((takenSpaces[6]==opponentNumber)&&(takenSpaces[7]==opponentNumber))
		   ||((takenSpaces[0]==opponentNumber)&&(takenSpaces[4]==opponentNumber))){
		    if(takenSpaces[8]==0){
			return 8;
		    }
		}
		//Block a win in space 7
		if(((takenSpaces[6]==opponentNumber)&&(takenSpaces[8]==opponentNumber))||((takenSpaces[1]==opponentNumber)&&(takenSpaces[4]==opponentNumber))){
		    if(takenSpaces[7]==0){
			return 7;
		    }
		}
		//Block a win in space 6
		if(((takenSpaces[7]==opponentNumber)&&(takenSpaces[8]==opponentNumber))||((takenSpaces[0]==opponentNumber)&&(takenSpaces[3]==opponentNumber))
		   ||((takenSpaces[4]==opponentNumber)&&(takenSpaces[2]==opponentNumber))){
		    if(takenSpaces[6]==0){
			return 6;
		    }
		}
		
		// Create a fork if player 1
		if (playerNumber == 1){
		    if(takenSpaces[0] == 1 && takenSpaces[8] == 0){
			return 8;
		    }
		    if(takenSpaces[8] == 1 && takenSpaces[0] == 0){
			return 0;
		    }
		    if(takenSpaces[2] == 1 && takenSpaces[6] == 0){
			return 6;
		    }
		    if(takenSpaces[6] == 1 && takenSpaces[2] == 0){
			return 2;
		    }
		        
		    if(takenSpaces[0] == 0){
			return 0;
		    }
		    if(takenSpaces[2] == 0){
			return 2;
		    }
		    if(takenSpaces[6] == 0){
			return 6;
		    }
		    if(takenSpaces[8] == 0){
			return 8;
		    }
		}    

		// Block an opponent's fork if player 2
		if (playerNumber == 2){
		    //Check if opponent has opposite corners
		    if (takenSpaces[0] == 1 && takenSpaces[8] == 1){
			//Play an empty side                         
			if(takenSpaces[1]==0){
			    return 1;
			}
			if(takenSpaces[3]==0){
			    return 3;
			}
			if(takenSpaces[5]==0){
			    return 5;
			}
			iif (takenSpaces[2] == 1 && takenSpaces[6] == 1){
			    //Play an empty side                                                                                                                                 
			    if(takenSpaces[1]==0){
				return 1;
			    }
			    if(takenSpaces[3]==0){
				return 3;
			    }
			    if(takenSpaces[5akenSpaces[1]==0){
				    return 1;
				}
				if(takenSpaces[3]==0){
				    return 3;
				}
				if(takenSpaces[5]==0){
				    return 5;
				}
				if(takenSpaces[7]==0){
				    return 7;
				}
				
				return -1;
				}
			}public class CutThroatComputerPlayer {
    
			    //Default constructor
			    public CutThroatComputerPlayer(){
			    }

			    //Picks space
			    public int pickSpace(String whichPlayer, int[] takenSpaces){
				
				//Takes in player's number and opponent's number
				int playerNumber = 0;
				int opponentNumber = 0;
				if(whichPlayer.equals("Player 1")){
				    playerNumber = 1;
				    opponentNumber = 2;
				}
				if(whichPlayer.equals("Player 2")){
				    playerNumber = 2;
				    opponentNumber = 1;
				}
				
				//Find a win in space 2
				if(((takenSpaces[0]==playerNumber)&&(takenSpaces[1]==playerNumber))||((takenSpaces[5]==playerNumber)&&(takenSpaces[8]==playerNumber))
				   ||((takenSpaces[4]==playerNumber)&&(takenSpaces[6]==playerNumber))){
				    if(takenSpaces[2]==0){
					return 2;
				    }
				}
				//Find a win in space 1
				if(((takenSpaces[0]==playerNumber)&&(takenSpaces[2]==playerNumber))||((takenSpaces[4]==playerNumber)&&(takenSpaces[7]==playerNumber))){
				    if(takenSpaces[1]==0){
					return 1;
				    }
				}
				//Find a win in space 0
				if(((takenSpaces[1]==playerNumber)&&(takenSpaces[2]==playerNumber))||((takenSpaces[3]==playerNumber)&&(takenSpaces[6]==playerNumber))
				   ||((takenSpaces[4]==playerNumber)&&(takenSpaces[8]==playerNumber))){
				    if(takenSpaces[0]==0){
					return 0;
				    }
				}
				//Find a win in space 5
				if(((takenSpaces[2]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[3]==playerNumber)&&(takenSpaces[4]==playerNumber))){
				    if(takenSpaces[5]==0){
					return 5;
				    }
				} 
				//Find a win in space 4
				if(((takenSpaces[3]==playerNumber)&&(takenSpaces[5]==playerNumber))||((takenSpaces[1]==playerNumber)&&(takenSpaces[7]==playerNumber))
				   ||((t=playerNumber))||((takenSpaces[6]==playerNumber)&&(takenSpaces[7]==playerNumber))
				   ||((takenSpaces[0]==playerNumber)&&(takenSpaces[4]==playerNumber))){
				    if(takenSpaces[8]==0){
					return 8;
				    }
				}
				//Find a win in space 7
				if(((takenSpaces[6]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[1]==playerNumber)&&(takenSpaces[4]
																       if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[7]==opponentNumber))){
																	   if(takenSpaces[1]==0){
																	       return 1;
																	   }
																       }
																       //Block a win in space 0
																       if(((takenSpaces[1]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpaces[3]==opponentNumber)&&(takenSpaces[6k a win in space 3
																																if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[6]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[5]==opponentNumber))){
																																    if(takenSpaces[3]==0){
																																	return 3;
																																    }
																																}
																																//Block a win in space 8
																																if(((takenSpaces[2]==opponentNumber)&&(takenSpaces[5]==opponentNumber))||((takenSpaces[6]==opponentNumbe    }
																																									  }
																																   
																																   // Create a fork if player 1
																																   if (playerNumber == 1){
																																       if(takenSpaces[0] == 1 && takenSpaces[8] == 0){
																																	   return 8;
																																       }
																																       if(takenSpaces[8] == 1 && takenSpaces[0] == 0){
																																	   return 0;
																																       }
																																       if(takenSpaces[2] == 1 && takenSpaces[6] == 0){
																																	   return 6;
																																       }
																																       if(takenSpaces[6] == 1 && takenSpaces[2] == 0){
																																	   return 2;
																																       }
																																           
																																       if(takenSpaces[0] == 0){
																																	   return 0;
																																	   if (takenSpaces[2] == 1 && takenSpaces[6] == 1){
																																	       //Play an empty side                                                                                                                                 
																																	       if(takenSpaces[1]==0){
																																		   return 1;
																																	       }
																																	       if(takenSpaces[3]==0){
																																		   return 3;
																																	       }
																																	       if(takenSpaces[5]==0){
																																		   return 5;
																																	       }
																																	       if(takenSpaces[7]==0){
																																		   return 7;
																																	       }
																																	   }
																																       }
      
																																       //Play the akenSpaces[1]==0){
																																       return 1;
																																   }
																																   if(takenSpaces[3]==0){
																																       return 3;
																																   }
																																   if(takenSpaces[5]==0){
																																       return 5;
																																   }
																																   if(takenSpaces[7]==0){
																																       return 7;
																																   }
																																   
																																   return -1;
																																   }
																																}public class CutThroatComputerPlayer {
    
																																    //Default constructor
																																    public CutThroatComputerPlayer(){
																																    }

																																    //Picks space
																																    public int pickSpace(String whichPlayer, int[] takenSpaces){
																																	
																																	//TplayerNumber)&&(takenSpaces[2]==playerNumber))||((takenSpaces[3]==playerNumber)&&(takenSpaces[6]==playerNumber))
																																	||((takenSpaces[4]==playerNumber)&&(takenSpaces[8]==playerNumber))){
																																	if(takenSpaces[0]==0){
																																	    return 0;
																																	}
																																    }
																																    //Find a win in space 5
																																    if(((takenSpaces[2]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[3]==playerNumber)&&(takenSpaces[4]==playerNumber))){
																																	if(takenSpaces[5]==0){
																																	    return 5;
																																	}
																																    } 
																																    //Find a win in space 4
																																    =playerNumber))||((takenSpaces[6]==playerNumber)&&(takenSpaces[7]==playerNumber))
																										 ||((takenSpaces[0]==playerNumber)&&(takenSpaces[4]==playerNumber))){
																	      if(takenSpaces[8]==0){
																		  return 8;
																	      }
																	  }
																	  //Find a win in space 7
																	  if(((takenSpaces[6]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[1]==playerNumber)&&(takenSpaces[4]==playerNumber))){
																	         
																	      if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[7]==opponentNumber))){
																		  if(takenSpaces[1]==0){
																		      return 1;
																		  }
																	      }
																	      //Block a win in space 0
																	      if(((takenSpaces[1]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpak a win in space 3
																											 if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[6]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[5]==opponentNumber))){
																											     if(takenSpaces[3]==0){
																												 return 3;
																											     }
																											 }
																											 //Block a win in space 8
																											 if(((takenSpaces[2]==opponentNumber)&&(    }
																											     }
																											    
																											    // Create a fork if player 1
																											    if (playerNumber == 1){
																												if(takenSpaces[0] == 1 && takenSpaces[8] == 0){
																												    return 8;
																												}
																												if(takenSpaces[8] == 1 && takenSpaces[0] == 0){
																												    return 0;
																												}
																												if(takenSpaces[2] == 1 && takenSpaces[6] == 0if (takenSpaces[2] == 1 && takenSpaces[6] == 1){
																													//Play an empty side                                                                                                                                 
																													if(takenSpaces[1]==0){
																													    return 1;
																													}
																													if(takenSpaces[3]==0){
																													    return 3;
																													}
																													if(takenSpaces[5]==0){
																													    return 5;
																													    akenSpaces[1]==0){
																													    return 1;
																													}
																													if(takenSpaces[3]==0){
																													    return 3;
																													}
																													if(takenSpaces[5]==0){
																													    return 5;
																													}
																													if(takenSpaces[7]==0){
																													    return 7;
																													}
																													
																													return -1;
																												    }
																												    }public class CutThroatComputerPlayer {
    
																													//Default constructor
																													public CutThroatComputerPlayer(){
																													}

																													//PplayerNumber)&&(takenSpaces[2]==playerNumber))||((takenSpaces[3]==playerNumber)&&(takenSpaces[6]==playerNumber))
																													||((takenSpaces[4]==playerNumber)&&(takenSpaces[8]==playerNumber))){
																													if(takenSpaces[0]==0){
																													    return 0;
																													}
																												    }
																												//Find a win in space 5
																												if(((takenSpaces[2]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[3]==playerNumbe=playerNumber))||((takenSpaces[6]==playerNumber)&&(takenSpaces[7]==playerNumber))
																												   ||((takenSpaces[0]==playerNumber)&&(takenSpaces[4]==playerNumber))){
																												    if(takenSpaces[8]==0){
																													return 8;
																												    }
																												}
																												//Find a win in space 7
																												if(((takenSpaces[6]==playerNumber)&&(takenSpaces[8]==playerNumber))||((takenSpaces[1]==playerNumb
																																				       if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[7]==opponentNumber))){
																																					   if(takenSpaces[1]==0){
																																					       return 1;
																																					   }
																																				       }
																																				       //Block a win in space 0
																																				       if(((takenSpaces[1]==opponentNumber)&&(k a win in space 3
																																									      if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[6]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[5]==opponentNumber))){
																																										  if(takenSpaces[3]==0){
																																										      return 3;
																																										  }
																																									      }
																																									      //Block a win in space 8
																																									      if(((takenSpaces[2]==opponentNumber)&&(takenSpaces[5]==opponentNumber))||((takenSpaces[6]==opponentNumber)&&(takenSpaces[7]==opponentNumber))
																																										 ||((takenSpaces[0]==opponentNumber)&&(takenSpaces[4]==o    }
																																										    }
																																										 
																																										 // Create a fork if player 1
																																										 if (playerNumber == 1){
																																										     if(takenSpaces[0] == 1 && takenSpaces[8] == 0){
																																											 return 8;
																																										     }
																																										     if(takenSpaces[8] == 1 && takenSpaces[0] == 0){
																																											 return 0;
																																										     }
																																										     if(takenSpaces[2] == 1 && takenSpaces[6] == 0){
																																											 return 6;
																																										     }
																																										     if(takenSpaces[6] == 1 && takenSpaces[2] == 0){
																																											 retif (takenSpaces[2] == 1 && takenSpaces[6] == 1){
																																											     //Play an empty side                                                                                                                                 
																																											     if(takenSpaces[1]==0){
																																												 return 1;
																																											     }
																																											     if(takenSpaces[3]==0){
																																												 return 3;akenSpaces[1]==0){
																																												 return 1;
																																											     }
																																											     if(takenSpaces[3]==0){
																																												 return 3;
																																											     }
																																											     if(takenSpaces[5]==0){
																																												 return 5;
																																											     }
																																											     if(takenSpaces[7]==0){
																																												 return 7;
																																											     }
																																											     
																																											     return -1;
																																											 }
																																										     }public class CutThroatComputerPlayer {
    
																																											 //Default constructor
																																											 public CutThroatCplayerNumber)&&(takenSpaces[2]==playerNumber))||((takenSpaces[3]==playerNumber)&&(takenSpaces[6]==playerNumber))
																																										 ||((t=playerNumber))||((takenSpaces[6]==playerNumber)&&(takenSpaces[7]==playerNumber))
																																										 ||((takenSpaces[0]==playerNumber)&&(takenSpaces[4]==playerNumber))){
																																										  if(takenSpaces[8]==0){
																																										      return 8;
																																										  }
																																									      }
																																									      //Find a win in space 7
																																									      if(((taken
																																										   if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[7]==opponentNumber))){
																																										       if(takenSpaces[1]==0){
																																											   return 1;
																																										       }
																																										   }
																																										   //Block a win in space 0
																																										   if(((takenSpaces[1]==opponentNumber)&&(takenSpaces[2]==opponentNumber))||((takenSpaces[3]==opponentNuk a win in space 3
																																																			      if(((takenSpaces[0]==opponentNumber)&&(takenSpaces[6]==opponentNumber))||((takenSpaces[4]==opponentNumber)&&(takenSpaces[5]==opponentNumber))){
																																																				  if(takenSpaces[3]==0){
																																																				      return 3;
																																																				  }
																																																			      }
																																																			      //Block a win in space 8
																																																			      if(((takenSpaces[2]==opponentNumber)&&(takenSpaces[5]==opponentNumber))||((    }
																																																													}
																																																				 
																																																				 // Create a fork if player 1
																																																				 if (playerNumber == 1){
																																																				     if(takenSpaces[0] == 1 && takenSpaces[8] == 0){
																																																					 return 8;
																																																				     }
																																																				     if(takenSpaces[8] == 1 && takenSpaces[0] == 0){
																																																					 return 0;
																																																				     }
																																																				     if(takenSpaces[2] == 1 && takenSpaces[6] == 0){
																																																					 return 6;
																																																				     }
																																																				     if(takenSpaces[6] == 1 && takenSpaces[2] == 0){
																																																					 return 2;
																																																				     }
																																																				         
																																																				     if(takenSpaces[0] == 0){
																																																					 return 0;
																																																				     }
																																																				     if(takenSpaces[2] == 0){
																																																					 returnif (takenSpaces[2] == 1 && takenSpaces[6] == 1){
																																																					     //Play an empty side                                                                                                                                 
																																																					     if(takenSpaces[1]==0){
																																																						 return 1;
																																																					     }
																																																					     if(takenSpaces[3]==0){
																																																						 return 3;
																																																					     }
																																																					     if(takenSpaces[5]==0){
																																																						 return 5;
																																																					     }
																																																					     if(takenSpaces[7]==0){
																																																						 return 7;
																																																					     }
																																																					 }
																																																				     }
      
																																																				     //Play the center
																																																				     if(takenSpaces[4]==0){
																																																					 return 4;
																																																				     }
																																																				     
																																																				     akenSpaces[1]==0){
																																																				     return 1;
																																																				 }
																																																				 if(takenSpaces[3]==0){
																																																				     return 3;
																																																				 }
																																																				 if(takenSpaces[5]==0){
																																																				     return 5;
																																																				 }
																																																				 if(takenSpaces[7]==0){
																																																				     return 7;
																																																				 }
																																																				 
																																																				 return -1;
																																																				 }
																																																			      }